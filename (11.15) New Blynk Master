#include <LiquidCrystal.h>

// put your setup code here, to run once:
// Template ID, Device Name and Auth Token are provided by the Blynk.Cloud
// See the Device Info tab, or Template settings
#define BLYNK_TEMPLATE_ID           "TMPLMxEeTrJ3"
#define BLYNK_DEVICE_NAME           "Quickstart Device"
#define BLYNK_AUTH_TOKEN            "pyLVc71jNr50-mrGnfE-A_Mua7xkT-45"

#include <esp_now.h>
#define PIN  33
#define NUMPIXELS 12
#define LED_COUNT 12
#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
// Comment this out to disable prints and save space
#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

char auth[] = BLYNK_AUTH_TOKEN;

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "iPhone (104)";
char pass[] = "00000001";

uint8_t broadcastAddress1[] = {0xC8, 0xF0, 0x9E, 0x9B, 0x48, 0x0C};
//uint8_t broadcastAddress[] = {0xC8, 0xF0, 0x9E, 0x9A, 0xE7, 0x78};
//uint8_t Receiver_Address2[] = {0xC8, 0xF0, 0x9E, 0x9C, 0x13, 0x80};

BlynkTimer timer;

// Define a data structure
typedef struct test_struct {
  int value; //ON/OFF
  int R;
  int G;
  int B;
  int brightness;
} test_struct;
// Create a structured object
test_struct test;

esp_now_peer_info_t peerInfo;

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  char macStr[18];
  Serial.print("Packet to: ");
  // Copies the sender mac address to a string
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print(macStr);
  Serial.print(" send status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

// This function is called every time the Virtual Pin 0 state changes
BLYNK_WRITE(V0)
{
  // Set incoming value from pin V0 to a variable
  test.value = param.asInt();
}
BLYNK_WRITE(V1)
{
  test.R = param.asInt();
}
BLYNK_WRITE(V2)
{
  test.G = param.asInt();
}
BLYNK_WRITE(V3)
{
  test.B = param.asInt();
}
BLYNK_WRITE(V4)
{
  test.brightness = param.asInt();
}

// This function is called every time the device is connected to the Blynk.Cloud
BLYNK_CONNECTED()
{
  Blynk.syncVirtual(V0);
  // Change Web Link Button message to "Congratulations!"
  Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
  Blynk.setProperty(V3, "onImageUrl",  "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
  Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}

// This function sends Arduino's uptime every second to Virtual Pin 2.
void myTimerEvent()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V2, millis() / 1000);
}

void setup()
{
  // Debug console
  Serial.begin(115200);
  pixels.begin();

  Blynk.begin(auth, ssid, pass);
  // You can also specify server:
  //Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
  //Blynk.begin(auth, ssid, pass, IPAddress(192,168,1,100), 8080);

  // Setup a function to be called every second
  timer.setInterval(1000L, myTimerEvent);
  pinMode(33, OUTPUT);
  //Communication code
  // Set ESP32 as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  // Initilize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  // Register callback function
  esp_now_register_send_cb(OnDataSent);

  // register peer
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  // register first peer  
  memcpy(peerInfo.peer_addr, broadcastAddress1, 6);
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
}

void loop()
{
  Blynk.run();
  timer.run();
  // You can inject your own code or combine it with other sketches.
  // Check other examples on how to communicate with Blynk. Remember
  // to avoid delay() function!
  Serial.print("V0: ");
  Serial.println(test.value);
  Serial.println(test.R);
  Serial.println(test.G);
  Serial.println(test.B);
  pixels.setBrightness(test.brightness);

  test.value = BLYNK__WRITE(V0);
 // test.R = R;
  //test.G = G;
  //test.B = B;
  //test.brightness = brightness;

  esp_err_t result = esp_now_send(0, (uint8_t *) &test, sizeof(test_struct));

    if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  }
  if (test.value == 1)
  {
    pixels.clear();
    for (int i = 0; i < LED_COUNT; i++) {
      pixels.setPixelColor(i, pixels.Color(test.R, test.G, test.B));
    }
    pixels.show();
  }  
  else
  {
    pixels.clear();
    pixels.show();
  }
}
