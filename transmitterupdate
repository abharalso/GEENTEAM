// Include Libraries
#include <esp_now.h>
#include <WiFi.h>
#define PIN 33
#define NUMPIXELS 12
#define LED_COUNT 12
#define CHANNEL 1
#include <Adafruit_NeoPixel.h>
#include <esp_wifi.h>

// Init ESP Now with fallback
void InitESPNow() {
  WiFi.disconnect();
  if (esp_now_init() == ESP_OK) {
    Serial.println("ESPNow Init Success");
  }
  else {
    Serial.println("ESPNow Init Failed");
    // Retry InitESPNow, add a counte and then restart?
    // InitESPNow();
    // or Simply Restart
    ESP.restart();
  }
}

// config AP SSID
void configDeviceAP() {
  String Prefix = "Slave:";
  String Mac = WiFi.macAddress();
  String SSID = Prefix + Mac;
  String Password = "123456789";
  bool result = WiFi.softAP(SSID.c_str(), Password.c_str(), CHANNEL, 0);
  if (!result) {
    Serial.println("AP Config failed.");
  } else {
    Serial.println("AP Config Success. Broadcasting with AP: " + String(SSID));
  }
}







Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
// Define a data structure
typedef struct struct_message {
  int value;
  int R;
  int G;
  int B;
  int brightness;
} struct_message;
// Create a structured object
struct_message myData;
// Callback function executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&myData, incomingData, sizeof(myData));
  Serial.print("Data received: ");
  Serial.println(len);
  Serial.print("Value Value: ");
  Serial.println(myData.value);
  Serial.print("R Value: ");
  Serial.println(myData.R);
  Serial.print("G Value: ");
  Serial.println(myData.G);
  Serial.print("B Value: ");
  Serial.println(myData.B);
  Serial.print("Brightness Value: ");
  Serial.println(myData.brightness);
  // Serial.println();
}
void setup() {
  // Set up Serial Monitor
  Serial.begin(115200);
  Serial.println("HI IM YOUR RECEIVER");
  // Set ESP32 as a Wi-Fi Station
  WiFi.mode(WIFI_AP);
    // This is the mac address of the Slave in AP Mode
  Serial.print("AP MAC: "); Serial.println(WiFi.softAPmacAddress());
  // Initilize ESP-NOW
  InitESPNow();
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info.
  esp_now_register_recv_cb(OnDataRecv);
}

/*// callback when data is recv from Master
//void OnDataRecv(const uint8_t *mac_addr, const uint8_t *data, int data_len) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print("Last Packet Recv from: "); Serial.println(macStr);
  Serial.print("Last Packet Recv Data: "); Serial.println(*data);
  Serial.println(""); 
} */

void loop() {
  Serial.println(myData.value);
  if (myData.value == 1){
    pixels.clear();
    for(int i = 0; i < LED_COUNT; i++) {
      pixels.setPixelColor(i, pixels.Color(myData.R, myData.G, myData.B));
    }
    pixels.show();
  }
  else
  {
    pixels.clear();
    pixels.show();
  }
}



//pair boards, esp now user guide
//is the terminal printing
